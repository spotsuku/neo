name: Deploy to Cloudflare Pages

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'

jobs:
  # „Ç≥„Éº„ÉâÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type check
        run: npm run type-check
        
      - name: Lint
        run: npm run lint
        
      - name: Security audit
        run: npm audit --audit-level=moderate
        
      - name: Check bundle size
        run: npm run analyze

  # „ÉÜ„Çπ„ÉàÂÆüË°å
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: quality-checks
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:unit
        
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests

  # „Éì„É´„Éâ
  build:
    runs-on: ubuntu-latest
    name: Build Application
    needs: [quality-checks, test]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            dist/
            package.json
            package-lock.json
            wrangler.jsonc
          retention-days: 7

  # Preview „Éá„Éó„É≠„Ç§ÔºàPRÊôÇÔºâ
  deploy-preview:
    runs-on: ubuntu-latest
    name: Deploy Preview
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Wrangler
        run: npm install -g wrangler@latest
        
      - name: Deploy to Preview
        run: wrangler pages deploy dist --project-name=neo-platform --branch=preview-${{ github.event.number }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = `https://preview-${{ github.event.number }}.neo-platform.pages.dev`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Preview deployed!**\n\nüì± Preview URL: ${previewUrl}\n\n*This preview will be available for testing until the PR is merged or closed.*`
            });

  # Staging „Éá„Éó„É≠„Ç§Ôºàdevelop „Éñ„É©„É≥„ÉÅÔºâ
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.neo-platform.pages.dev
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Wrangler
        run: npm install -g wrangler@latest
        
      - name: Deploy D1 Migrations (Staging)
        run: wrangler d1 migrations apply neo-platform-staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Deploy to Staging
        run: wrangler pages deploy dist --project-name=neo-platform-staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Run E2E tests against Staging
        run: npm run test:e2e
        env:
          BASE_URL: https://staging.neo-platform.pages.dev
          
      - name: Notify Slack of Staging Deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: ':rocket: NEO Platform successfully deployed to Staging!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Production „Éá„Éó„É≠„Ç§Ôºàmain „Éñ„É©„É≥„ÉÅÔºâ
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: build
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://neo-platform.pages.dev
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Wrangler
        run: npm install -g wrangler@latest
        
      - name: Deploy D1 Migrations (Production)
        run: wrangler d1 migrations apply neo-platform-production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Deploy to Production
        run: wrangler pages deploy dist --project-name=neo-platform
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Warm up application
        run: |
          curl -f https://neo-platform.pages.dev/api/health || exit 1
          curl -f https://neo-platform.pages.dev/ || exit 1
          
      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            üöÄ **Production Deployment v${{ github.run_number }}**
            
            **Changes:** ${{ github.event.head_commit.message }}
            **Commit:** ${{ github.sha }}
            **Deployed at:** ${{ steps.date.outputs.date }}
            
            **URLs:**
            - Production: https://neo-platform.pages.dev
            - Admin: https://neo-platform.pages.dev/admin
            
          draft: false
          prerelease: false
          
      - name: Notify Slack of Production Deployment
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: ':tada: NEO Platform v${{ github.run_number }} successfully deployed to Production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          text: ':warning: NEO Platform Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'